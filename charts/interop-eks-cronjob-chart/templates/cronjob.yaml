{{ $root := . }}

{{- $digestSuffix := "" }}
{{- if and .Values.cronjob.image .Values.cronjob.image.digest }}
{{- $digestSuffix = (nospace (cat "@" .Values.cronjob.image.digest)) }}
{{- end }}

{{- $imageTag := "" }}
{{- if .Values.cronjob.image.tag }}
{{- $imageTag = (nospace (cat ":" .Values.cronjob.image.tag)) }}
{{- end }}

{{- if and (not $imageTag) (not $digestSuffix)}}
{{ fail "One of cronjob.image.tag and cronjob.image.digest must be defined." }}
{{- end }}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.name | quote }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "interop-eks-cronjob-chart.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.cronjob.schedule | quote }}
  timeZone: {{ .Values.cronjob.timeZone | quote }}
  failedJobsHistoryLimit: {{ .Values.cronjob.failedJobsHistoryLimit }} # K8s default is 1, Chart default is 1
  successfulJobsHistoryLimit: {{ .Values.cronjob.successfulJobsHistoryLimit }} # K8s default is 3, Chart default is 0
  {{- if .Values.cronjob.concurrencyPolicy }} # K8s default is Allow
  concurrencyPolicy: {{ .Values.cronjob.concurrencyPolicy }}
  {{- end }}
  suspend: {{ .Values.cronjob.suspend }}
  jobTemplate:
    metadata:
      labels:
        {{- include "interop-eks-cronjob-chart.labels" . | nindent 8 }}
      annotations:
        {{- if .Values.cronjob.image.digest }}
        digest: {{ .Values.cronjob.image.digest | quote }} # Used to force deployment on same image version but different content
        {{- end }}
    spec:
      backoffLimit: {{ .Values.cronjob.backoffLimit }} # K8s default is 6, Chart default is 6
      activeDeadlineSeconds: {{ .Values.cronjob.activeDeadlineSeconds }} # Chart default is 3600
      template:
        metadata:
          labels:
            {{- include "interop-eks-cronjob-chart.labels" . | nindent 12 }}
        spec:
          automountServiceAccountToken: {{ .Values.cronjob.automountServiceAccountToken }}
          restartPolicy: {{ .Values.cronjob.restartPolicy }}
          serviceAccountName: {{ .Values.name | quote }}

          {{- if and .Values.cronjob .Values.cronjob.flywayInitContainer .Values.cronjob.flywayInitContainer.create }}
          initContainers:
            - name: migrate-db
              image: flyway/flyway:{{ .Values.cronjob.flywayInitContainer.version}}
              {{- if .Values.cronjob.flywayInitContainer.downloadRedshiftDriver }}
              command:
                - /bin/sh
                - -c
                - |
                  echo "Downloading Redshift JDBC driver..."
                  curl -L -o /flyway/drivers/RedshiftJDBC.jar https://s3.amazonaws.com/redshift-downloads/drivers/jdbc/2.1.0.32/redshift-jdbc42-2.1.0.32.jar
                  echo "Starting Flyway migration..."
                  flyway migrate
              {{- else }}
              args:
                - migrate
              {{- end }}
              env:
                {{- if .Values.cronjob.flywayInitContainer.envFromConfigmaps }}
                {{- range $key, $val := .Values.cronjob.flywayInitContainer.envFromConfigmaps -}}
                {{- $renderedVal := include "interop-eks-cronjob-chart.render-template" (dict "value" $val "context" $) }}
                {{- $configmapAddress := mustRegexSplit "\\." $renderedVal 2 }}
                - name: {{ $key }}
                  valueFrom:
                    configMapKeyRef:
                      name: {{ index $configmapAddress 0 }}
                      key: {{ index $configmapAddress 1 }}
                {{- end }}
                {{- end }}
                {{- if .Values.cronjob.flywayInitContainer.env }}
                {{- range $key, $val := .Values.cronjob.flywayInitContainer.env }}
                {{- $preprocessedEnvValue := include "interop-eks-cronjob-chart.render-template" (dict "value" $val "context" $) }}
                - name: "{{ $key }}"
                  value: "{{ $preprocessedEnvValue }}"
                {{- end }}
                {{- end }}
                {{- if .Values.cronjob.flywayInitContainer.envFromSecrets }}
                {{- range $key, $val := .Values.cronjob.flywayInitContainer.envFromSecrets -}}
                {{- $renderedVal := include "interop-eks-cronjob-chart.render-template" (dict "value" $val "context" $) }}
                {{- $secretAddress := mustRegexSplit "\\." $renderedVal 2 }}
                - name: {{ $key }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ index $secretAddress 0 }}
                      key: {{ index $secretAddress 1 }}
                {{- end }}
                {{- end }}
              volumeMounts:
                - name: migrations-files
                  mountPath: "/flyway/sql"
              {{- if .Values.cronjob.flywayInitContainer.resources }}
              resources:
                {{- toYaml .Values.cronjob.flywayInitContainer.resources | nindent 14 }}
              {{- else }}
              resources:
                {{- toYaml .Values.cronjob.resources | nindent 14 }}
              {{- end}}
          {{- end }}
          containers:
            - name: {{ .Values.name | quote }}
              image: "{{ .Values.cronjob.image.repositoryPrefix }}/{{ .Values.cronjob.image.repositoryName | default .Values.name }}{{ $imageTag }}{{ $digestSuffix }}"
              imagePullPolicy: {{ .Values.cronjob.image.imagePullPolicy }}
              {{- if and .Values.cronjob .Values.cronjob.command }}
              command: {{- toYaml .Values.cronjob.command | nindent 14 }}
              {{- end }}
              {{- if and .Values.cronjob .Values.cronjob.args }}
              args: {{ .Values.cronjob.args }}
              {{- end }}
              {{- if .Values.cronjob.securityContext }}
              securityContext:
                {{- toYaml .Values.cronjob.securityContext | nindent 12 }}
              {{- end }}
              env:
                {{- if .Values.configmap }}
                {{- range $key, $val := .Values.configmap }}
                - name: {{ $key | quote }}
                  valueFrom:
                    configMapKeyRef:
                      name: {{ $root.Values.name | quote }}
                      key: {{ $key | quote }}
                {{- end }}
                {{- end }}
                {{- if and .Values.cronjob .Values.cronjob.envFromFieldRef }}
                {{- range $key, $val := .Values.cronjob.envFromFieldRef }}
                - name: {{ $key | quote }}
                  valueFrom:
                    fieldRef:
                      fieldPath: {{ $val | quote }}
                {{- end }}
                {{- end }}
                {{- if and .Values.cronjob .Values.cronjob.envFromConfigmaps }}
                {{- range $key, $val := .Values.cronjob.envFromConfigmaps -}}
                {{ $configmapAddress := mustRegexSplit "\\." $val 2 }}
                - name: {{ $key | quote }}
                  valueFrom:
                    configMapKeyRef:
                      name: {{ index $configmapAddress 0 | quote }}
                      key: {{ index $configmapAddress 1 | quote }}
                {{- end }}
                {{- end }}
                {{- if and .Values.cronjob .Values.cronjob.envFromSecrets }}
                {{- range $key, $val := .Values.cronjob.envFromSecrets -}}
                {{ $secretAddress := mustRegexSplit "\\." $val 2 }}
                - name: {{ $key | quote }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ index $secretAddress 0 | quote }}
                      key: {{ index $secretAddress 1 | quote }}
                {{- end }}
                {{- end }}
                {{- if and .Values.cronjob .Values.cronjob.env }}
                {{- range $key, $val := .Values.cronjob.env }}
                {{- $preprocessedEnvValue := include "interop-eks-cronjob-chart.render-template" (dict "value" $val "context" $) }}
                - name: {{ $key | quote }}
                  value: {{ $preprocessedEnvValue | quote }}
                {{- end }}
                {{- end }}
              resources:
                {{- toYaml .Values.cronjob.resources | nindent 16 }}
              {{- if and .Values.cronjob .Values.cronjob.volumeMounts }}
              volumeMounts:
                {{- toYaml .Values.cronjob.volumeMounts | nindent 16 }}
              {{- end }}
          {{- if and .Values.cronjob (or .Values.cronjob.volumes (and .Values.cronjob.flywayInitContainer .Values.cronjob.flywayInitContainer.create)) }}
          volumes:
            {{- if and .Values.cronjob .Values.cronjob.flywayInitContainer .Values.cronjob.flywayInitContainer.create }}
            - name: migrations-files
              projected:
                sources:
                  - configMap:
                      name: {{ .Values.cronjob.flywayInitContainer.migrationsConfigmap }}
            {{- end }}
            {{ if .Values.cronjob.volumes }}
            {{- toYaml .Values.cronjob.volumes | nindent 12 }}
            {{- end }}
          {{- end }}
